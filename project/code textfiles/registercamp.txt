package dependencies;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

import connector.Connector;

import javax.swing.border.MatteBorder;
import javax.swing.border.LineBorder;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

public class RegisterCamp extends JFrame implements ActionListener {

	private JPanel contentPane;
	private JTextField nametxt;
	private JTextField datetxt;
	private JTextField timetxt;
	private JTextField phnotxt;
	private JLabel lblRegisterYourBlood;
	private JButton btnhomepage;
	private JLabel errorlbl;
	private JLabel lblEmailid;
	private JTextField emailtxt;
	private JComboBox comboBox_1;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RegisterCamp frame = new RegisterCamp();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public RegisterCamp() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//setExtendedState(JFrame.MAXIMIZED_BOTH);
		setBounds(100, 100, 1296, 1007);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(null);
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		errorlbl = new JLabel("");
		errorlbl.setForeground(Color.YELLOW);
		errorlbl.setFont(new Font("Times New Roman", Font.BOLD, 18));
		errorlbl.setBounds(440, 676, 250, 50);
		contentPane.add(errorlbl);
		
		JLabel lblNewLabel = new JLabel("Name");
		lblNewLabel.setForeground(new Color(255, 69, 0));
		lblNewLabel.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblNewLabel.setBounds(93, 274, 150, 50);
		contentPane.add(lblNewLabel);
		
		JLabel lblLocation = new JLabel("Location");
		lblLocation.setForeground(new Color(255, 69, 0));
		lblLocation.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblLocation.setBounds(631, 274, 150, 50);
		contentPane.add(lblLocation);
		
		JLabel lblOrganizingDate = new JLabel("Organizing Date");
		lblOrganizingDate.setForeground(new Color(255, 69, 0));
		lblOrganizingDate.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblOrganizingDate.setBounds(93, 469, 178, 50);
		contentPane.add(lblOrganizingDate);
		
		JLabel lblOrganizingTime = new JLabel("Organizing Time");
		lblOrganizingTime.setForeground(new Color(255, 69, 0));
		lblOrganizingTime.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblOrganizingTime.setBounds(93, 576, 178, 50);
		contentPane.add(lblOrganizingTime);
		
		JLabel lblContactPhoneNumber = new JLabel("Contact Number");
		lblContactPhoneNumber.setForeground(new Color(255, 69, 0));
		lblContactPhoneNumber.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblContactPhoneNumber.setBounds(631, 395, 207, 50);
		contentPane.add(lblContactPhoneNumber);
		
		nametxt = new JTextField();
		nametxt.setForeground(new Color(255, 255, 255));
		nametxt.setOpaque(false);
		nametxt.setFont(new Font("Times New Roman", Font.PLAIN, 22));
		nametxt.setBorder(new MatteBorder(0, 0, 2, 0, (Color) new Color(255, 69, 0)));
		nametxt.setBounds(283, 285, 271, 40);
		contentPane.add(nametxt);
		nametxt.setColumns(10);
		
		datetxt = new JTextField();
		datetxt.setForeground(new Color(255, 255, 255));
		datetxt.setOpaque(false);
		datetxt.setFont(new Font("Times New Roman", Font.PLAIN, 22));
		datetxt.setBorder(new MatteBorder(0, 0, 2, 0, (Color) new Color(255, 69, 0)));
		datetxt.setColumns(10);
		datetxt.setBounds(283, 480, 271, 40);
		contentPane.add(datetxt);
		
		timetxt = new JTextField();
		timetxt.setForeground(new Color(255, 255, 255));
		timetxt.setOpaque(false);
		timetxt.setFont(new Font("Times New Roman", Font.PLAIN, 22));
		timetxt.setBorder(new MatteBorder(0, 0, 2, 0, (Color) new Color(255, 69, 0)));
		timetxt.setColumns(10);
		timetxt.setBounds(283, 587, 271, 40);
		contentPane.add(timetxt);
		
		phnotxt = new JTextField();
		phnotxt.setForeground(new Color(255, 255, 255));
		phnotxt.setOpaque(false);
		phnotxt.setFont(new Font("Times New Roman", Font.PLAIN, 22));
		phnotxt.setBorder(new MatteBorder(0, 0, 2, 0, (Color) new Color(255, 69, 0)));
		phnotxt.setColumns(10);
		phnotxt.setBounds(821, 395, 271, 40);
		contentPane.add(phnotxt);
		
		lblRegisterYourBlood = new JLabel("Register Your Blood Camp");
		lblRegisterYourBlood.setBackground(new Color(255, 250, 205));
		lblRegisterYourBlood.setBorder(new LineBorder(new Color(255, 69, 0), 2, true));
		lblRegisterYourBlood.setHorizontalAlignment(SwingConstants.CENTER);
		lblRegisterYourBlood.setForeground(Color.WHITE);
		lblRegisterYourBlood.setFont(new Font("Times New Roman", Font.BOLD, 42));
		lblRegisterYourBlood.setBounds(121, 33, 1029, 99);
		contentPane.add(lblRegisterYourBlood);
		
		JButton btnsubmit = new JButton("Submit");
		btnsubmit.setOpaque(false);
		btnsubmit.setForeground(new Color(255, 69, 0));
		btnsubmit.setBorder(new LineBorder(new Color(255, 69, 0), 2, true));
		btnsubmit.setBackground(new Color(128, 128, 128));
		btnsubmit.addActionListener(this);
		btnsubmit.setFont(new Font("Times New Roman", Font.BOLD, 24));
		btnsubmit.setBounds(243, 757, 199, 50);
		contentPane.add(btnsubmit);
		
		btnhomepage = new JButton("Homepage");
		btnhomepage.setOpaque(false);
		btnhomepage.setForeground(new Color(255, 69, 0));
		btnhomepage.setBorder(new LineBorder(new Color(255, 69, 0), 2, true));
		btnhomepage.setBackground(new Color(128, 128, 128));
		btnhomepage.addActionListener(this);
		btnhomepage.setFont(new Font("Times New Roman", Font.BOLD, 24));
		btnhomepage.setBounds(692, 757, 199, 50);
		contentPane.add(btnhomepage);
		
		lblEmailid = new JLabel("Email-ID");
		lblEmailid.setForeground(new Color(255, 69, 0));
		lblEmailid.setFont(new Font("Times New Roman", Font.BOLD, 24));
		lblEmailid.setBounds(93, 377, 150, 50);
		contentPane.add(lblEmailid);
		
		emailtxt = new JTextField();
		emailtxt.setForeground(new Color(255, 255, 255));
		emailtxt.setOpaque(false);
		emailtxt.setFont(new Font("Times New Roman", Font.PLAIN, 22));
		emailtxt.setBorder(new MatteBorder(0, 0, 2, 0, (Color) new Color(255, 69, 0)));
		emailtxt.setColumns(10);
		emailtxt.setBounds(283, 380, 271, 40);
		contentPane.add(emailtxt);
		
		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(790, 744, 229, -242);
		contentPane.add(comboBox);
		
		comboBox_1 = new JComboBox();
		comboBox_1.setOpaque(false);
		comboBox_1.setBorder(new LineBorder(new Color(255, 69, 0), 1, true));
		comboBox_1.setForeground(new Color(255, 69, 0));
		comboBox_1.setModel(new DefaultComboBoxModel(new String[] {"Kothrud", "Karve Nagar", "Warje"}));
		comboBox_1.setFont(new Font("Times New Roman", Font.PLAIN, 18));
		comboBox_1.setBounds(793, 291, 271, 40);
		contentPane.add(comboBox_1);
		
		lblNewLabel_1 = new JLabel("(YYYY-MM-DD)");
		lblNewLabel_1.setForeground(Color.WHITE);
		lblNewLabel_1.setFont(new Font("Times New Roman", Font.PLAIN, 14));
		lblNewLabel_1.setBounds(569, 493, 119, 26);
		contentPane.add(lblNewLabel_1);
		
		lblNewLabel_2 = new JLabel("(xx AM/PM)");
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Times New Roman", Font.PLAIN, 14));
		lblNewLabel_2.setBounds(566, 596, 108, 30);
		contentPane.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("New label");
		lblNewLabel_3.setIcon(new ImageIcon("C:\\Users\\KEDAR TERKHEDKAR\\Downloads\\WhatsApp Image 2019-10-07 at 12.38.10 AM.jpeg"));
		lblNewLabel_3.setBounds(0, 0, 1278, 830);
		contentPane.add(lblNewLabel_3);
		
	}

	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		int userid = 3;
		Connection conn = Connector.ConnectDb();
		String cmd = e.getActionCommand();
		if(cmd == "Submit"){
			while (true) {
				String text = nametxt.getText();
				String text2 = emailtxt.getText();
				String text3 = phnotxt.getText();
				String text4 = datetxt.getText();
				if(!isValid(emailtxt.getText())){
					errorlbl.setText("Incorrect Email ID!");
					break;
				}
				if(!isValidnumber(text3)){
					errorlbl.setText("Phone Number Wrong!");
					break;
				}
				if(!isValidDate(text4)){
					errorlbl.setText("Date Format Wrong!");
					break;
				}
				String sql_1 = "insert into login_info (Full_Name, EmailID, Password, type_user) values (?, ?, ?, ?);";
				String sql = "insert into blood_camp_details (Location, Org_date, Org_Time, Contact_Phone_Number, AC_ID) values (?, ?, ?, ?, ?)";
				try {
					PreparedStatement pst1 = conn.prepareStatement(sql_1); //login
					
					pst1.setString(1, text);
					
					pst1.setString(2, text2);
					pst1.setString(3, "BLOODCAMP");
					pst1.setInt(4, userid);
					int rs1 = pst1.executeUpdate();
					sql_1 = "select AC_ID from login_info where emailid=?";
					pst1 = conn.prepareStatement(sql_1);
					pst1.setString(1, text2);
					ResultSet result = pst1.executeQuery();
					result.next();
					int acid = result.getInt("AC_ID");

					PreparedStatement pst = conn.prepareStatement(sql); //bcdetails
					pst.setString(1, comboBox_1.getSelectedItem().toString());
					
					pst.setString(2, text4);
					pst.setString(3, timetxt.getText());
					
					pst.setString(4, text3);
					pst.setInt(5, acid);
					pst.executeUpdate();
					//errorlbl.setVisible(true);
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				errorlbl.setText("Registration Successful!");
				break;
			}
		}
		else if(cmd == "Homepage"){
			dispose();
			loginpage login = new loginpage();
			login.frame.setVisible(true);
		}
		
	}
	static boolean isValid(String email) {
	      String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
	      return email.matches(regex);
	}
	static boolean isValidDate(String date) {
		String regex = "[12][90][0-9]{2}-(0[0-9]|1[0-2])-([0-2][0-9]|3[01])";
	      return date.matches(regex);
	}
	
	public static boolean isValidnumber(String s) 
  { 
      // The given argument to compile() method  
      // is regular expression. With the help of  
      // regular expression we can validate mobile 
      // number.  
      // 1) Begins with 0 or 91 
      // 2) Then contains 7 or 8 or 9. 
      // 3) Then contains 9 digits 
      Pattern p = Pattern.compile("(0/91)?[7-9][0-9]{9}"); 

      // Pattern class contains matcher() method 
      // to find matching between given number  
      // and regular expression 
      Matcher m = p.matcher(s); 
      return (m.find() && m.group().equals(s)); 
  }
}
